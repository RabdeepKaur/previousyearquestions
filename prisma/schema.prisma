// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  fullName    String?
  customerId  String?   @unique
  priceId     String?
  status      String    @default("inactive")
  sessions    Session[]
  answer      answer[]
  payments    Payment[]
}

model Session {
  id          String    @id @default(uuid())
  sessionId   String    @unique
  userId      String
  uploadsUsed Int       @default(0)
  maxUploads  Int       @default(2)
  createdAt   DateTime  @default(now())
  expiresAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '7 days'"))
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer   answer[]
}

model answer {
  id              String   @id @default(uuid())
  userId          String
  sessionId       String
  originalFileUrl String
  answerText      String
  status          String   @default("complete")
  title           String?
  filename        String
  filePath        String?
  uploadType      String?
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session         Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String   @id @default(uuid())
  amount          Int
  status          String
  stripePaymentId String   @unique
  priceId         String
  userEmail       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userEmail], references: [email])
}

